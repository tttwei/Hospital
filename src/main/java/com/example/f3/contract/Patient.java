package com.example.f3.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int8;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Patient extends Contract {
    public static final String[] BINARY_ARRAY = {"","90048015610ffb5780601f10610fd057610100808354040283529160200191610ffb565b820191906000526020600020905b815481529060010190602001808311610fde57829003601f168201915b505050505081525050905090565b6110116115c1565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110f55780601f106110ca576101008083540402835291602001916110f5565b820191906000526020600020905b8154815290600101906020018083116110d857829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681526020016001820160029054906101000a900460000b60000b60000b8152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111ee5780601f106111c3576101008083540402835291602001916111ee565b820191906000526020600020905b8154815290600101906020018083116111d157829003601f168201915b5050505050815250509050919050565b60606112086115c1565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129090611a1f565b60405180910390fd5b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136f5780601f106113445761010080835404028352916020019161136f565b820191906000526020600020905b81548152906001019060200180831161135257829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b6020831015156113c4578051825260208201915060208101905060208303925061139f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310151561142d5780518252602082019150602081019050602083039250611408565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515156114a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149890611a3f565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600260000b815260200184815250905080600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906115319291906115f9565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160020190805190602001906115b49291906115f9565b5090505050505050505050565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061163a57805160ff1916838001178555611668565b82800160010185558215611668579182015b8281111561166757825182559160200191906001019061164c565b5b5090506116759190611679565b5090565b61169b91905b8082111561169757600081600090555060010161167f565b5090565b90565b60006116aa8235611aff565b905092915050565b600082601f83011215156116c557600080fd5b81356116d86116d382611aae565b611a81565b915080825260208301602083018583830111156116f457600080fd5b6116ff838284611b2c565b50505092915050565b60006117148235611b1f565b905092915050565b60006020828403121561172e57600080fd5b600061173c8482850161169e565b91505092915050565b600080600080600060a0868803121561175d57600080fd5b600061176b8882890161169e565b955050602086013567ffffffffffffffff81111561178857600080fd5b611794888289016116b2565b94505060406117a588828901611708565b93505060606117b688828901611708565b925050608086013567ffffffffffffffff8111156117d357600080fd5b6117df888289016116b2565b9150509295509295909350565b6000806000806080858703121561180257600080fd5b600085013567ffffffffffffffff81111561181c57600080fd5b611828878288016116b2565b945050602061183987828801611708565b935050604061184a87828801611708565b925050606085013567ffffffffffffffff81111561186757600080fd5b611873878288016116b2565b91505092959194509250565b61188881611ae5565b82525050565b600061189982611ada565b8084526118ad816020860160208601611b3b565b6118b681611b6e565b602085010191505092915050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b600060a083016000830151848203600086015261194f828261188e565b915050602083015161196460208601826119af565b50604083015161197760408601826119af565b50606083015161198a606086018261187f565b50608083015184820360808601526119a2828261188e565b9150508091505092915050565b6119b881611af2565b82525050565b600060a08201905081810360008301526119d8818861188e565b90506119e760208301876119af565b6119f460408301866119af565b611a01606083018561187f565b8181036080830152611a13818461188e565b90509695505050505050565b60006020820190508181036000830152611a38816118c4565b9050919050565b60006020820190508181036000830152611a58816118fb565b9050919050565b60006020820190508181036000830152611a798184611932565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611aa457600080fd5b8060405250919050565b600067ffffffffffffffff821115611ac557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b60008160000b9050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611b59578082015181840152602081019050611b3e565b83811115611b68576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820fcea71b8159acf3cd185733a3d61f62bdb20ec9d100317cdf2d7e91de0f484626c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610fdc90611a1f565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600260000b815260200184815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906110759291906115f9565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160020190805190602001906110f89291906115f9565b50905050505050505050565b606061110e6115c1565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111e45780601f106111b9576101008083540402835291602001916111e4565b820191906000526020600020905b8154815290600101906020018083116111c757829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b6020831015156112395780518252602082019150602081019050602083039250611214565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156112a2578051825260208201915060208101905060208303925061127d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611315576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161130c90611a1f565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600260000b815260200184815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906113a59291906115f9565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160020190805190602001906114289291906115f9565b50905050505050505050565b6001602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114e05780601f106114b5576101008083540402835291602001916114e0565b820191906000526020600020905b8154815290600101906020018083116114c357829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460000b90806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115b75780601f1061158c576101008083540402835291602001916115b7565b820191906000526020600020905b81548152906001019060200180831161159a57829003601f168201915b5050505050905085565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061163a57805160ff1916838001178555611668565b82800160010185558215611668579182015b8281111561166757825182559160200191906001019061164c565b5b5090506116759190611679565b5090565b61169b91905b8082111561169757600081600090555060010161167f565b5090565b90565b60006116aa8235611aff565b905092915050565b600082601f83011215156116c557600080fd5b81356116d86116d382611aae565b611a81565b915080825260208301602083018583830111156116f457600080fd5b6116ff838284611b2c565b50505092915050565b60006117148235611b1f565b905092915050565b60006020828403121561172e57600080fd5b600061173c8482850161169e565b91505092915050565b600080600080600060a0868803121561175d57600080fd5b600061176b8882890161169e565b955050602086013567ffffffffffffffff81111561178857600080fd5b611794888289016116b2565b94505060406117a588828901611708565b93505060606117b688828901611708565b925050608086013567ffffffffffffffff8111156117d357600080fd5b6117df888289016116b2565b9150509295509295909350565b6000806000806080858703121561180257600080fd5b600085013567ffffffffffffffff81111561181c57600080fd5b611828878288016116b2565b945050602061183987828801611708565b935050604061184a87828801611708565b925050606085013567ffffffffffffffff81111561186757600080fd5b611873878288016116b2565b91505092959194509250565b61188881611ae5565b82525050565b600061189982611ada565b8084526118ad816020860160208601611b3b565b6118b681611b6e565b602085010191505092915050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b600060a083016000830151848203600086015261194f828261188e565b915050602083015161196460208601826119af565b50604083015161197760408601826119af565b50606083015161198a606086018261187f565b50608083015184820360808601526119a2828261188e565b9150508091505092915050565b6119b881611af2565b82525050565b600060a08201905081810360008301526119d8818861188e565b90506119e760208301876119af565b6119f460408301866119af565b611a01606083018561187f565b8181036080830152611a13818461188e565b90509695505050505050565b60006020820190508181036000830152611a38816118c4565b9050919050565b60006020820190508181036000830152611a58816118fb565b9050919050565b60006020820190508181036000830152611a798184611932565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611aa457600080fd5b8060405250919050565b600067ffffffffffffffff821115611ac557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b60008160000b9050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611b59578082015181840152602081019050611b3e565b83811115611b68576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820b2e7d0975d3ce6cc895bcdc3a1099aa42839d9065e629c361b539aa398ca634f6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"updatePatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"patientMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryPatient\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryPatient\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"updatePatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATEPATIENT = "updatePatient";

    public static final String FUNC_ADDPATIENT = "addPatient";

    public static final String FUNC_PATIENTMAP = "patientMap";

    public static final String FUNC_QUERYPATIENT = "queryPatient";

    protected Patient(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt updatePatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatePatient(String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getUpdatePatientStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt addPatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPatient(String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getAddPatientStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt addPatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getAddPatientAddressStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple5<String, BigInteger, BigInteger, BigInteger, String> patientMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_PATIENTMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, BigInteger, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public Struct0 queryPatient() throws ContractException {
        final Function function = new Function(FUNC_QUERYPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct0 queryPatient(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public TransactionReceipt updatePatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatePatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getUpdatePatientAddressStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public static Patient load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Patient(contractAddress, client, credential);
    }

    public static Patient deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Patient.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger theType;

        public String dataBirth;

        public Struct0(Utf8String name, Uint8 sex, Uint8 age, Int8 theType, Utf8String dataBirth) {
            super(name,sex,age,theType,dataBirth);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.theType = theType.getValue();
            this.dataBirth = dataBirth.getValue();
        }

        public Struct0(String name, BigInteger sex, BigInteger age, BigInteger theType, String dataBirth) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Int8(theType),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.theType = theType;
            this.dataBirth = dataBirth;
        }
    }
}
