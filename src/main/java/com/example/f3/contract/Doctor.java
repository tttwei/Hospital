package com.example.f3.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int8;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Doctor extends Contract {
    public static final String[] BINARY_ARRAY = {"","929190818152602001828054600181600116156101000203166002900480156110165780601f10610feb57610100808354040283529160200191611016565b820191906000526020600020905b815481529060010190602001808311610ff957829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b60208310151561106b5780518252602082019150602081019050602083039250611046565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156110d457805182526020820191506020810190506020830392506110af565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151515611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f90611a20565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600160000b81526020018460ff16815250905080600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906111db9291906115e1565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160010160036101000a81548160ff021916908360ff16021790555090505050505050505050565b60606112796115a6565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b6020831015156113a4578051825260208201915060208101905060208303925061137f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310151561140d57805182526020820191506020810190506020830392506113e8565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790611a40565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600160000b81526020018460ff16815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906115139291906115e1565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160010160036101000a81548160ff021916908360ff160217905550905050505050505050565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162257805160ff1916838001178555611650565b82800160010185558215611650579182015b8281111561164f578251825591602001919060010190611634565b5b50905061165d9190611661565b5090565b61168391905b8082111561167f576000816000905550600101611667565b5090565b90565b60006116928235611b00565b905092915050565b600082601f83011215156116ad57600080fd5b81356116c06116bb82611aaf565b611a82565b915080825260208301602083018583830111156116dc57600080fd5b6116e7838284611b2d565b50505092915050565b60006116fc8235611b20565b905092915050565b60006020828403121561171657600080fd5b600061172484828501611686565b91505092915050565b600080600080600060a0868803121561174557600080fd5b600061175388828901611686565b955050602086013567ffffffffffffffff81111561177057600080fd5b61177c8882890161169a565b945050604061178d888289016116f0565b935050606061179e888289016116f0565b92505060806117af888289016116f0565b9150509295509295909350565b600080600080608085870312156117d257600080fd5b600085013567ffffffffffffffff8111156117ec57600080fd5b6117f88782880161169a565b9450506020611809878288016116f0565b935050604061181a878288016116f0565b925050606061182b878288016116f0565b91505092959194509250565b61184081611ae6565b82525050565b600061185182611adb565b808452611865816020860160208601611b3c565b61186e81611b6f565b602085010191505092915050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b600060a083016000830151848203600086015261193e8282611846565b91505060208301516119536020860182611997565b5060408301516119666040860182611997565b5060608301516119796060860182611837565b50608083015161198c6080860182611997565b508091505092915050565b6119a081611af3565b82525050565b600060a08201905081810360008301526119c08188611846565b90506119cf6020830187611997565b6119dc6040830186611997565b6119e96060830185611837565b6119f66080830184611997565b9695505050505050565b60006020820190508181036000830152611a198161187c565b9050919050565b60006020820190508181036000830152611a39816118b3565b9050919050565b60006020820190508181036000830152611a59816118ea565b9050919050565b60006020820190508181036000830152611a7a8184611921565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611aa557600080fd5b8060405250919050565b600067ffffffffffffffff821115611ac657600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b60008160000b9050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611b5a578082015181840152602081019050611b3f565b83811115611b69576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820cd1bf9aab3d3ae90bf156984347bdab290e686adea7bfb9a79d3feaf983bbe356c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","00000000000000000000008152600401610fc590611a00565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600160000b81526020018460ff16815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906110619291906115e1565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160010160036101000a81548160ff021916908360ff160217905550905050505050505050565b6110fc6115a6565b6111046115a6565b600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111e85780601f106111bd576101008083540402835291602001916111e8565b820191906000526020600020905b8154815290600101906020018083116111cb57829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681526020016001820160029054906101000a900460000b60000b60000b81526020016001820160039054906101000a900460ff1660ff1660ff168152505090508091505090565b60606112786115a6565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561134e5780601f106113235761010080835404028352916020019161134e565b820191906000526020600020905b81548152906001019060200180831161133157829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b6020831015156113a3578051825260208201915060208101905060208303925061137e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310151561140c57805182526020820191506020810190506020830392506113e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151515611480576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161147790611a20565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600160000b81526020018460ff16815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906115139291906115e1565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160010160036101000a81548160ff021916908360ff160217905550905050505050505050565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162257805160ff1916838001178555611650565b82800160010185558215611650579182015b8281111561164f578251825591602001919060010190611634565b5b50905061165d9190611661565b5090565b61168391905b8082111561167f576000816000905550600101611667565b5090565b90565b60006116928235611b00565b905092915050565b600082601f83011215156116ad57600080fd5b81356116c06116bb82611aaf565b611a82565b915080825260208301602083018583830111156116dc57600080fd5b6116e7838284611b2d565b50505092915050565b60006116fc8235611b20565b905092915050565b60006020828403121561171657600080fd5b600061172484828501611686565b91505092915050565b600080600080600060a0868803121561174557600080fd5b600061175388828901611686565b955050602086013567ffffffffffffffff81111561177057600080fd5b61177c8882890161169a565b945050604061178d888289016116f0565b935050606061179e888289016116f0565b92505060806117af888289016116f0565b9150509295509295909350565b600080600080608085870312156117d257600080fd5b600085013567ffffffffffffffff8111156117ec57600080fd5b6117f88782880161169a565b9450506020611809878288016116f0565b935050604061181a878288016116f0565b925050606061182b878288016116f0565b91505092959194509250565b61184081611ae6565b82525050565b600061185182611adb565b808452611865816020860160208601611b3c565b61186e81611b6f565b602085010191505092915050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b600060a083016000830151848203600086015261193e8282611846565b91505060208301516119536020860182611997565b5060408301516119666040860182611997565b5060608301516119796060860182611837565b50608083015161198c6080860182611997565b508091505092915050565b6119a081611af3565b82525050565b600060a08201905081810360008301526119c08188611846565b90506119cf6020830187611997565b6119dc6040830186611997565b6119e96060830185611837565b6119f66080830184611997565b9695505050505050565b60006020820190508181036000830152611a198161187c565b9050919050565b60006020820190508181036000830152611a39816118b3565b9050919050565b60006020820190508181036000830152611a59816118ea565b9050919050565b60006020820190508181036000830152611a7a8184611921565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611aa557600080fd5b8060405250919050565b600067ffffffffffffffff821115611ac657600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b60008160000b9050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611b5a578082015181840152602081019050611b3f565b83811115611b69576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820ca450274e972b0f4a483e45098eaea117f7e628605614e05db425dc8836bc0d36c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctorMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryDoctor\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryDoctor\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATEDOCTOR = "updateDoctor";

    public static final String FUNC_ADDDOCTOR = "addDoctor";

    public static final String FUNC_DOCTORMAP = "doctorMap";

    public static final String FUNC_DELDOCTOR = "delDoctor";

    public static final String FUNC_QUERYDOCTOR = "queryDoctor";

    protected Doctor(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt updateDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getUpdateDoctorStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt addDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getAddDoctorAddressStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> doctorMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_DOCTORMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public TransactionReceipt delDoctor(String addr) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] delDoctor(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDelDoctor(String addr) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDelDoctorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Struct0 queryDoctor(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct0 queryDoctor() throws ContractException {
        final Function function = new Function(FUNC_QUERYDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public TransactionReceipt updateDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getUpdateDoctorAddressStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public TransactionReceipt addDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getAddDoctorStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public static Doctor load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Doctor(contractAddress, client, credential);
    }

    public static Doctor deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Doctor.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger theType;

        public BigInteger workYear;

        public Struct0(Utf8String name, Uint8 sex, Uint8 age, Int8 theType, Uint8 workYear) {
            super(name,sex,age,theType,workYear);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.theType = theType.getValue();
            this.workYear = workYear.getValue();
        }

        public Struct0(String name, BigInteger sex, BigInteger age, BigInteger theType, BigInteger workYear) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Int8(theType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.theType = theType;
            this.workYear = workYear;
        }
    }
}
