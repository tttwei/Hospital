package com.example.f3.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int8;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class HospitalCases extends Contract {
    public static final String[] BINARY_ARRAY = {"","60010190602001808311610eb257829003601f168201915b5050505050815250508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f755780601f10610f4a57610100808354040283529160200191610f75565b820191906000526020600020905b815481529060010190602001808311610f5857829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b50505050508152602001600882018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110b95780601f1061108e576101008083540402835291602001916110b9565b820191906000526020600020905b81548152906001019060200180831161109c57829003601f168201915b50505050508152602001600982018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561115b5780601f106111305761010080835404028352916020019161115b565b820191906000526020600020905b81548152906001019060200180831161113e57829003601f168201915b50505050508152602001600a82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111fd5780601f106111d2576101008083540402835291602001916111fd565b820191906000526020600020905b8154815290600101906020018083116111e057829003601f168201915b50505050508152505081526020019060010190610bd2565b505050509050919050565b610200604051908101604052806000815260200161123c6112f2565b815260200161124961132d565b815260200160608152602001606081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112b357805160ff19168380011785556112e1565b828001600101855582156112e1579182015b828111156112e05782518255916020019190600101906112c5565b5b5090506112ee9190611365565b5090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001600060ff1681525090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b61138791905b8082111561138357600081600090555060010161136b565b5090565b90565b60006113968235611c0e565b905092915050565b60006113aa8251611c2e565b905092915050565b600082601f83011215156113c557600080fd5b81516113d86113d382611b62565b611b35565b915080825260208301602083018583830111156113f457600080fd5b6113ff838284611c61565b50505092915050565b600082601f830112151561141b57600080fd5b813561142e61142982611b8e565b611b35565b9150808252602083016020830185838301111561144a57600080fd5b611455838284611c52565b50505092915050565b600060a0828403121561147057600080fd5b61147a60a0611b35565b9050600082015167ffffffffffffffff81111561149657600080fd5b6114a2848285016113b2565b60008301525060206114b6848285016115ca565b60208301525060406114ca848285016115ca565b60408301525060606114de8482850161139e565b60608301525060806114f2848285016115ca565b60808301525092915050565b600060a0828403121561151057600080fd5b61151a60a0611b35565b9050600082015167ffffffffffffffff81111561153657600080fd5b611542848285016113b2565b6000830152506020611556848285016115ca565b602083015250604061156a848285016115ca565b604083015250606061157e8482850161139e565b606083015250608082015167ffffffffffffffff81111561159e57600080fd5b6115aa848285016113b2565b60808301525092915050565b60006115c28235611c3b565b905092915050565b60006115d68251611c45565b905092915050565b6000602082840312156115f057600080fd5b60006115fe8482850161138a565b91505092915050565b60008060008060008060c0878903121561162057600080fd5b600061162e89828a0161138a565b965050602087013567ffffffffffffffff81111561164b57600080fd5b61165789828a01611408565b955050604087013567ffffffffffffffff81111561167457600080fd5b61168089828a01611408565b945050606087013567ffffffffffffffff81111561169d57600080fd5b6116a989828a01611408565b935050608087013567ffffffffffffffff8111156116c657600080fd5b6116d289828a01611408565b92505060a087013567ffffffffffffffff8111156116ef57600080fd5b6116fb89828a01611408565b9150509295509295509295565b6000806040838503121561171b57600080fd5b60006117298582860161138a565b925050602061173a858286016115b6565b9150509250929050565b60006020828403121561175657600080fd5b600082015167ffffffffffffffff81111561177057600080fd5b61177c8482850161145e565b91505092915050565b60006020828403121561179757600080fd5b600082015167ffffffffffffffff8111156117b157600080fd5b6117bd848285016114fe565b91505092915050565b60006117d182611bc7565b808452602084019350836020820285016117ea85611bba565b60005b84811015611823578383038852611805838351611879565b925061181082611bdd565b91506020880197506001810190506117ed565b508196508694505050505092915050565b61183d81611bea565b82525050565b600061184e82611bd2565b808452611862816020860160208601611c61565b61186b81611c94565b602085010191505092915050565b6000610100830160008301516118926000860182611a46565b50602083015184820360208601526118aa8282611953565b915050604083015184820360408601526118c482826119c9565b915050606083015184820360608601526118de8282611843565b915050608083015184820360808601526118f88282611843565b91505060a083015184820360a08601526119128282611843565b91505060c083015184820360c086015261192c8282611843565b91505060e083015184820360e08601526119468282611843565b9150508091505092915050565b600060a08301600083015184820360008601526119708282611843565b91505060208301516119856020860182611a55565b5060408301516119986040860182611a55565b5060608301516119ab6060860182611834565b5060808301516119be6080860182611a55565b508091505092915050565b600060a08301600083015184820360008601526119e68282611843565b91505060208301516119fb6020860182611a55565b506040830151611a0e6040860182611a55565b506060830151611a216060860182611834565b5060808301518482036080860152611a398282611843565b9150508091505092915050565b611a4f81611bf7565b82525050565b611a5e81611c01565b82525050565b60006020820190508181036000830152611a7e81846117c6565b905092915050565b600061010082019050611a9c600083018b611a46565b8181036020830152611aae818a611953565b90508181036040830152611ac281896119c9565b90508181036060830152611ad68188611843565b90508181036080830152611aea8187611843565b905081810360a0830152611afe8186611843565b905081810360c0830152611b128185611843565b905081810360e0830152611b268184611843565b90509998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715611b5857600080fd5b8060405250919050565b600067ffffffffffffffff821115611b7957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611ba557600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008160000b9050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160000b9050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611c7f578082015181840152602081019050611c64565b83811115611c8e576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058208317891e0cb83b98500a833a4d3e9e3d0d02f5df6f4f260e128c7f2de929fc236c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","1f10610ed157610100808354040283529160200191610efc565b820191906000526020600020905b815481529060010190602001808311610edf57829003601f168201915b50505050508152505090806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f9e5780601f10610f7357610100808354040283529160200191610f9e565b820191906000526020600020905b815481529060010190602001808311610f8157829003601f168201915b505050505090806007018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b505050505090806008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110da5780601f106110af576101008083540402835291602001916110da565b820191906000526020600020905b8154815290600101906020018083116110bd57829003601f168201915b505050505090806009018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111785780601f1061114d57610100808354040283529160200191611178565b820191906000526020600020905b81548152906001019060200180831161115b57829003601f168201915b50505050509080600a018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112165780601f106111eb57610100808354040283529160200191611216565b820191906000526020600020905b8154815290600101906020018083116111f957829003601f168201915b5050505050905088565b610200604051908101604052806000815260200161123c6112f2565b815260200161124961132d565b815260200160608152602001606081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112b357805160ff19168380011785556112e1565b828001600101855582156112e1579182015b828111156112e05782518255916020019190600101906112c5565b5b5090506112ee9190611365565b5090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001600060ff1681525090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b61138791905b8082111561138357600081600090555060010161136b565b5090565b90565b60006113968235611c0e565b905092915050565b60006113aa8251611c2e565b905092915050565b600082601f83011215156113c557600080fd5b81516113d86113d382611b62565b611b35565b915080825260208301602083018583830111156113f457600080fd5b6113ff838284611c61565b50505092915050565b600082601f830112151561141b57600080fd5b813561142e61142982611b8e565b611b35565b9150808252602083016020830185838301111561144a57600080fd5b611455838284611c52565b50505092915050565b600060a0828403121561147057600080fd5b61147a60a0611b35565b9050600082015167ffffffffffffffff81111561149657600080fd5b6114a2848285016113b2565b60008301525060206114b6848285016115ca565b60208301525060406114ca848285016115ca565b60408301525060606114de8482850161139e565b60608301525060806114f2848285016115ca565b60808301525092915050565b600060a0828403121561151057600080fd5b61151a60a0611b35565b9050600082015167ffffffffffffffff81111561153657600080fd5b611542848285016113b2565b6000830152506020611556848285016115ca565b602083015250604061156a848285016115ca565b604083015250606061157e8482850161139e565b606083015250608082015167ffffffffffffffff81111561159e57600080fd5b6115aa848285016113b2565b60808301525092915050565b60006115c28235611c3b565b905092915050565b60006115d68251611c45565b905092915050565b6000602082840312156115f057600080fd5b60006115fe8482850161138a565b91505092915050565b60008060008060008060c0878903121561162057600080fd5b600061162e89828a0161138a565b965050602087013567ffffffffffffffff81111561164b57600080fd5b61165789828a01611408565b955050604087013567ffffffffffffffff81111561167457600080fd5b61168089828a01611408565b945050606087013567ffffffffffffffff81111561169d57600080fd5b6116a989828a01611408565b935050608087013567ffffffffffffffff8111156116c657600080fd5b6116d289828a01611408565b92505060a087013567ffffffffffffffff8111156116ef57600080fd5b6116fb89828a01611408565b9150509295509295509295565b6000806040838503121561171b57600080fd5b60006117298582860161138a565b925050602061173a858286016115b6565b9150509250929050565b60006020828403121561175657600080fd5b600082015167ffffffffffffffff81111561177057600080fd5b61177c8482850161145e565b91505092915050565b60006020828403121561179757600080fd5b600082015167ffffffffffffffff8111156117b157600080fd5b6117bd848285016114fe565b91505092915050565b60006117d182611bc7565b808452602084019350836020820285016117ea85611bba565b60005b84811015611823578383038852611805838351611879565b925061181082611bdd565b91506020880197506001810190506117ed565b508196508694505050505092915050565b61183d81611bea565b82525050565b600061184e82611bd2565b808452611862816020860160208601611c61565b61186b81611c94565b602085010191505092915050565b6000610100830160008301516118926000860182611a46565b50602083015184820360208601526118aa8282611953565b915050604083015184820360408601526118c482826119c9565b915050606083015184820360608601526118de8282611843565b915050608083015184820360808601526118f88282611843565b91505060a083015184820360a08601526119128282611843565b91505060c083015184820360c086015261192c8282611843565b91505060e083015184820360e08601526119468282611843565b9150508091505092915050565b600060a08301600083015184820360008601526119708282611843565b91505060208301516119856020860182611a55565b5060408301516119986040860182611a55565b5060608301516119ab6060860182611834565b5060808301516119be6080860182611a55565b508091505092915050565b600060a08301600083015184820360008601526119e68282611843565b91505060208301516119fb6020860182611a55565b506040830151611a0e6040860182611a55565b506060830151611a216060860182611834565b5060808301518482036080860152611a398282611843565b9150508091505092915050565b611a4f81611bf7565b82525050565b611a5e81611c01565b82525050565b60006020820190508181036000830152611a7e81846117c6565b905092915050565b600061010082019050611a9c600083018b611a46565b8181036020830152611aae818a611953565b90508181036040830152611ac281896119c9565b90508181036060830152611ad68188611843565b90508181036080830152611aea8187611843565b905081810360a0830152611afe8186611843565b905081810360c0830152611b128185611843565b905081810360e0830152611b268184611843565b90509998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715611b5857600080fd5b8060405250919050565b600067ffffffffffffffff821115611b7957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611ba557600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008160000b9050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160000b9050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611c7f578082015181840152602081019050611c64565b83811115611c8e576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820819e6c7a44695905acbca4c5d18663b61f0eb9b8ed8c9d648c2ecae41ebe81a66c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_patient\",\"type\":\"address\"},{\"name\":\"_appointmentType\",\"type\":\"string\"},{\"name\":\"_appointmentTime\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_prescription\",\"type\":\"string\"},{\"name\":\"_money\",\"type\":\"string\"}],\"name\":\"addCases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cases\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"doctor\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"patient\",\"type\":\"tuple\"},{\"name\":\"appointmentType\",\"type\":\"string\"},{\"name\":\"appointmentTime\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"prescription\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryCases\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"doctor\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"patient\",\"type\":\"tuple\"},{\"name\":\"appointmentType\",\"type\":\"string\"},{\"name\":\"appointmentTime\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"prescription\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"doctor\",\"type\":\"address\"},{\"name\":\"patient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDCASES = "addCases";

    public static final String FUNC_CASES = "cases";

    public static final String FUNC_QUERYCASES = "queryCases";

    protected HospitalCases(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getAddCasesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple8<BigInteger, Struct0, Struct1, String, String, String, String, String> cases(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_CASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Struct0>() {}, new TypeReference<Struct1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, Struct0, Struct1, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (Struct0) results.get(1), 
                (Struct1) results.get(2), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue());
    }

    public DynamicArray<Struct2> queryCases(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct2>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public static HospitalCases load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new HospitalCases(contractAddress, client, credential);
    }

    public static HospitalCases deploy(Client client, CryptoKeyPair credential, String doctor, String patient) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(doctor), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(patient)));
        return deploy(HospitalCases.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Struct0 extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger theType;

        public BigInteger workYear;

        public Struct0(Utf8String name, Uint8 sex, Uint8 age, Int8 theType, Uint8 workYear) {
            super(name,sex,age,theType,workYear);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.theType = theType.getValue();
            this.workYear = workYear.getValue();
        }

        public Struct0(String name, BigInteger sex, BigInteger age, BigInteger theType, BigInteger workYear) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Int8(theType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.theType = theType;
            this.workYear = workYear;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger theType;

        public String dataBirth;

        public Struct1(Utf8String name, Uint8 sex, Uint8 age, Int8 theType, Utf8String dataBirth) {
            super(name,sex,age,theType,dataBirth);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.theType = theType.getValue();
            this.dataBirth = dataBirth.getValue();
        }

        public Struct1(String name, BigInteger sex, BigInteger age, BigInteger theType, String dataBirth) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Int8(theType),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.theType = theType;
            this.dataBirth = dataBirth;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public BigInteger id;

        public Struct0 doctor;

        public Struct1 patient;

        public String appointmentType;

        public String appointmentTime;

        public String description;

        public String prescription;

        public String money;

        public Struct2(Uint256 id, Struct0 doctor, Struct1 patient, Utf8String appointmentType, Utf8String appointmentTime, Utf8String description, Utf8String prescription, Utf8String money) {
            super(id,doctor,patient,appointmentType,appointmentTime,description,prescription,money);
            this.id = id.getValue();
            this.doctor = doctor;
            this.patient = patient;
            this.appointmentType = appointmentType.getValue();
            this.appointmentTime = appointmentTime.getValue();
            this.description = description.getValue();
            this.prescription = prescription.getValue();
            this.money = money.getValue();
        }

        public Struct2(BigInteger id, Struct0 doctor, Struct1 patient, String appointmentType, String appointmentTime, String description, String prescription, String money) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),doctor,patient,new org.fisco.bcos.sdk.abi.datatypes.Utf8String(appointmentType),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(appointmentTime),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(prescription),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(money));
            this.id = id;
            this.doctor = doctor;
            this.patient = patient;
            this.appointmentType = appointmentType;
            this.appointmentTime = appointmentTime;
            this.description = description;
            this.prescription = prescription;
            this.money = money;
        }
    }
}
