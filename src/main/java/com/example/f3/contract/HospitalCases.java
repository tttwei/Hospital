package com.example.f3.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int8;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class HospitalCases extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040526000600455336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614cc3806100586000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063177af26d14610101578063209a4f5f1461012c578063280d2bfb146101555780632963393f1461017e5780632c1ca5e1146101a757806330539fa7146101d05780633b6d9390146101f9578063548871741461023a57806359aaba17146102635780635ae3e018146102a45780637b85968a146102cd5780639b4f817614610311578063c38401a01461034e578063d25564e01461038b578063db6b697f146103b6578063ef1ef02d146103f3578063f3a1a4e71461041c578063fb4944f514610445575b600080fd5b34801561010d57600080fd5b5061011661046e565b6040516101239190614a5f565b60405180910390f35b34801561013857600080fd5b50610153600480360361014e9190810190614471565b6105e8565b005b34801561016157600080fd5b5061017c600480360361017791908101906143de565b610920565b005b34801561018a57600080fd5b506101a560048036036101a09190810190614313565b610ce2565b005b3480156101b357600080fd5b506101ce60048036036101c9919081019061416b565b6110ab565b005b3480156101dc57600080fd5b506101f760048036036101f291908101906143de565b6116b5565b005b34801561020557600080fd5b50610220600480360361021b9190810190614142565b6119e5565b6040516102319594939291906149a5565b60405180910390f35b34801561024657600080fd5b50610261600480360361025c919081019061426c565b611ae7565b005b34801561026f57600080fd5b5061028a60048036036102859190810190614142565b611ea9565b60405161029b959493929190614944565b60405180910390f35b3480156102b057600080fd5b506102cb60048036036102c69190810190614142565b612036565b005b3480156102d957600080fd5b506102f460048036036102ef91908101906143a2565b612148565b604051610308989796959493929190614aa3565b60405180910390f35b34801561031d57600080fd5b5061033860048036036103339190810190614142565b61276b565b6040516103459190614922565b60405180910390f35b34801561035a57600080fd5b5061037560048036036103709190810190614142565b612e1a565b6040516103829190614a5f565b60405180910390f35b34801561039757600080fd5b506103a0613027565b6040516103ad9190614a81565b60405180910390f35b3480156103c257600080fd5b506103dd60048036036103d89190810190614142565b61321a565b6040516103ea9190614a81565b60405180910390f35b3480156103ff57600080fd5b5061041a6004803603610415919081019061426c565b61340f565b005b34801561042857600080fd5b50610443600480360361043e9190810190614313565b6137d2565b005b34801561045157600080fd5b5061046c60048036036104679190810190614471565b613b9c565b005b610476613ed3565b61047e613ed3565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105625780601f1061053757610100808354040283529160200191610562565b820191906000526020600020905b81548152906001019060200180831161054557829003601f168201915b505050505081526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681526020016001820160029054906101000a900460000b60000b60000b81526020016001820160039054906101000a900460ff1660ff1660ff168152505090508091505090565b60606105f2613ed3565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c85780601f1061069d576101008083540402835291602001916106c8565b820191906000526020600020905b8154815290600101906020018083116106ab57829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b60208310151561071d57805182526020820191506020810190506020830392506106f8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156107865780518252602082019150602081019050602083039250610761565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515156107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190614a1f565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600160000b81526020018460ff16815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061088d929190613f0e565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff16021790555060808201518160010160036101000a81548160ff021916908360ff160217905550905050505050505050565b606061092a613f8e565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b2906149ff565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a915780601f10610a6657610100808354040283529160200191610a91565b820191906000526020600020905b815481529060010190602001808311610a7457829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b602083101515610ae65780518252602082019150602081019050602083039250610ac1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610b4f5780518252602082019150602081019050602083039250610b2a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151515610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90614a3f565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff168152602001600260000b815260200184815250905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610c53929190613f0e565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555060608201518160010160026101000a81548160ff021916908360000b60ff1602179055506080820151816002019080519060200190610cd6929190613f0e565b50905050505050505050565b6060610cec613ed3565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d74906149ff565b60405180910390fd5b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e535780601f10610e2857610100808354040283529160200191610e53565b820191906000526020600020905b815481529060010190602001808311610e3657829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b602083101515610ea85780518252602082019150602081019050602083039250610e83565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515610f115780518252602082019150602081019050602083039250610eec565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610f84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7b90614a3f565b60405180910390fd5b60a0604051908101604052808781526020018660ff1681526020018560ff1681526020","","","","52602001600060ff1681526020016000800b8152602001606081525090565b6102006040519081016040528060008152602001613fe261403d565b8152602001613fef614078565b815260200160608152602001606081526020016060815260200160608152602001606081525090565b61403a91905b8082111561403657600081600090555060010161401e565b5090565b90565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001600060ff1681525090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b60006140bc8235614bff565b905092915050565b600082601f83011215156140d757600080fd5b81356140ea6140e582614b7f565b614b52565b9150808252602083016020830185838301111561410657600080fd5b614111838284614c36565b50505092915050565b60006141268235614c1f565b905092915050565b600061413a8235614c29565b905092915050565b60006020828403121561415457600080fd5b6000614162848285016140b0565b91505092915050565b60008060008060008060c0878903121561418457600080fd5b600061419289828a016140b0565b965050602087013567ffffffffffffffff8111156141af57600080fd5b6141bb89828a016140c4565b955050604087013567ffffffffffffffff8111156141d857600080fd5b6141e489828a016140c4565b945050606087013567ffffffffffffffff81111561420157600080fd5b61420d89828a016140c4565b935050608087013567ffffffffffffffff81111561422a57600080fd5b61423689828a016140c4565b92505060a087013567ffffffffffffffff81111561425357600080fd5b61425f89828a016140c4565b9150509295509295509295565b600080600080600060a0868803121561428457600080fd5b6000614292888289016140b0565b955050602086013567ffffffffffffffff8111156142af57600080fd5b6142bb888289016140c4565b94505060406142cc8882890161412e565b93505060606142dd8882890161412e565b925050608086013567ffffffffffffffff8111156142fa57600080fd5b614306888289016140c4565b9150509295509295909350565b600080600080600060a0868803121561432b57600080fd5b6000614339888289016140b0565b955050602086013567ffffffffffffffff81111561435657600080fd5b614362888289016140c4565b94505060406143738882890161412e565b93505060606143848882890161412e565b92505060806143958882890161412e565b9150509295509295909350565b600080604083850312156143b557600080fd5b60006143c3858286016140b0565b92505060206143d48582860161411a565b9150509250929050565b600080600080608085870312156143f457600080fd5b600085013567ffffffffffffffff81111561440e57600080fd5b61441a878288016140c4565b945050602061442b8782880161412e565b935050604061443c8782880161412e565b925050606085013567ffffffffffffffff81111561445957600080fd5b614465878288016140c4565b91505092959194509250565b6000806000806080858703121561448757600080fd5b600085013567ffffffffffffffff8111156144a157600080fd5b6144ad878288016140c4565b94505060206144be8782880161412e565b93505060406144cf8782880161412e565b92505060606144e08782880161412e565b91505092959194509250565b60006144f782614bb8565b8084526020840193508360208202850161451085614bab565b60005b8481101561454957838303885261452b838351614644565b925061453682614bce565b9150602088019750600181019050614513565b508196508694505050505092915050565b61456381614bdb565b82525050565b600061457482614bc3565b808452614588816020860160208601614c45565b61459181614c78565b602085010191505092915050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b60006101008301600083015161465d6000860182614904565b50602083015184820360208601526146758282614794565b9150506040830151848203604086015261468f8282614887565b915050606083015184820360608601526146a98282614569565b915050608083015184820360808601526146c38282614569565b91505060a083015184820360a08601526146dd8282614569565b91505060c083015184820360c08601526146f78282614569565b91505060e083015184820360e08601526147118282614569565b9150508091505092915050565b600060a083016000830151848203600086015261473b8282614569565b91505060208301516147506020860182614913565b5060408301516147636040860182614913565b506060830151614776606086018261455a565b5060808301516147896080860182614913565b508091505092915050565b600060a08301600083015184820360008601526147b18282614569565b91505060208301516147c66020860182614913565b5060408301516147d96040860182614913565b5060608301516147ec606086018261455a565b5060808301516147ff6080860182614913565b508091505092915050565b600060a08301600083015184820360008601526148278282614569565b915050602083015161483c6020860182614913565b50604083015161484f6040860182614913565b506060830151614862606086018261455a565b506080830151848203608086015261487a8282614569565b9150508091505092915050565b600060a08301600083015184820360008601526148a48282614569565b91505060208301516148b96020860182614913565b5060408301516148cc6040860182614913565b5060608301516148df606086018261455a565b50608083015184820360808601526148f78282614569565b9150508091505092915050565b61490d81614be8565b82525050565b61491c81614bf2565b82525050565b6000602082019050818103600083015261493c81846144ec565b905092915050565b600060a082019050818103600083015261495e8188614569565b905061496d6020830187614913565b61497a6040830186614913565b614987606083018561455a565b81810360808301526149998184614569565b90509695505050505050565b600060a08201905081810360008301526149bf8188614569565b90506149ce6020830187614913565b6149db6040830186614913565b6149e8606083018561455a565b6149f56080830184614913565b9695505050505050565b60006020820190508181036000830152614a188161459f565b9050919050565b60006020820190508181036000830152614a38816145d6565b9050919050565b60006020820190508181036000830152614a588161460d565b9050919050565b60006020820190508181036000830152614a79818461471e565b905092915050565b60006020820190508181036000830152614a9b818461480a565b905092915050565b600061010082019050614ab9600083018b614904565b8181036020830152614acb818a614794565b90508181036040830152614adf8189614887565b90508181036060830152614af38188614569565b90508181036080830152614b078187614569565b905081810360a0830152614b1b8186614569565b905081810360c0830152614b2f8185614569565b905081810360e0830152614b438184614569565b90509998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715614b7557600080fd5b8060405250919050565b600067ffffffffffffffff821115614b9657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008160000b9050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614c63578082015181840152602081019050614c48565b83811115614c72576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e74716a3b0f616dda7731ff418c144cf25a321e1af5b36ce34e326ac69f23f596c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","85558215613fcf579182015b82811115613fce578251825591602001919060010190613fb3565b5b509050613fdc919061408b565b5090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001600060ff1681525090565b60a06040519081016040528060608152602001600060ff168152602001600060ff1681526020016000800b8152602001606081525090565b6140ad91905b808211156140a9576000816000905550600101614091565b5090565b90565b60006140bc8235614bff565b905092915050565b600082601f83011215156140d757600080fd5b81356140ea6140e582614b7f565b614b52565b9150808252602083016020830185838301111561410657600080fd5b614111838284614c36565b50505092915050565b60006141268235614c1f565b905092915050565b600061413a8235614c29565b905092915050565b60006020828403121561415457600080fd5b6000614162848285016140b0565b91505092915050565b60008060008060008060c0878903121561418457600080fd5b600061419289828a016140b0565b965050602087013567ffffffffffffffff8111156141af57600080fd5b6141bb89828a016140c4565b955050604087013567ffffffffffffffff8111156141d857600080fd5b6141e489828a016140c4565b945050606087013567ffffffffffffffff81111561420157600080fd5b61420d89828a016140c4565b935050608087013567ffffffffffffffff81111561422a57600080fd5b61423689828a016140c4565b92505060a087013567ffffffffffffffff81111561425357600080fd5b61425f89828a016140c4565b9150509295509295509295565b600080600080600060a0868803121561428457600080fd5b6000614292888289016140b0565b955050602086013567ffffffffffffffff8111156142af57600080fd5b6142bb888289016140c4565b94505060406142cc8882890161412e565b93505060606142dd8882890161412e565b925050608086013567ffffffffffffffff8111156142fa57600080fd5b614306888289016140c4565b9150509295509295909350565b600080600080600060a0868803121561432b57600080fd5b6000614339888289016140b0565b955050602086013567ffffffffffffffff81111561435657600080fd5b614362888289016140c4565b94505060406143738882890161412e565b93505060606143848882890161412e565b92505060806143958882890161412e565b9150509295509295909350565b600080604083850312156143b557600080fd5b60006143c3858286016140b0565b92505060206143d48582860161411a565b9150509250929050565b600080600080608085870312156143f457600080fd5b600085013567ffffffffffffffff81111561440e57600080fd5b61441a878288016140c4565b945050602061442b8782880161412e565b935050604061443c8782880161412e565b925050606085013567ffffffffffffffff81111561445957600080fd5b614465878288016140c4565b91505092959194509250565b6000806000806080858703121561448757600080fd5b600085013567ffffffffffffffff8111156144a157600080fd5b6144ad878288016140c4565b94505060206144be8782880161412e565b93505060406144cf8782880161412e565b92505060606144e08782880161412e565b91505092959194509250565b60006144f782614bb8565b8084526020840193508360208202850161451085614bab565b60005b8481101561454957838303885261452b838351614644565b925061453682614bce565b9150602088019750600181019050614513565b508196508694505050505092915050565b61456381614bdb565b82525050565b600061457482614bc3565b808452614588816020860160208601614c45565b61459181614c78565b602085010191505092915050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b60006101008301600083015161465d6000860182614904565b50602083015184820360208601526146758282614794565b9150506040830151848203604086015261468f8282614887565b915050606083015184820360608601526146a98282614569565b915050608083015184820360808601526146c38282614569565b91505060a083015184820360a08601526146dd8282614569565b91505060c083015184820360c08601526146f78282614569565b91505060e083015184820360e08601526147118282614569565b9150508091505092915050565b600060a083016000830151848203600086015261473b8282614569565b91505060208301516147506020860182614913565b5060408301516147636040860182614913565b506060830151614776606086018261455a565b5060808301516147896080860182614913565b508091505092915050565b600060a08301600083015184820360008601526147b18282614569565b91505060208301516147c66020860182614913565b5060408301516147d96040860182614913565b5060608301516147ec606086018261455a565b5060808301516147ff6080860182614913565b508091505092915050565b600060a08301600083015184820360008601526148278282614569565b915050602083015161483c6020860182614913565b50604083015161484f6040860182614913565b506060830151614862606086018261455a565b506080830151848203608086015261487a8282614569565b9150508091505092915050565b600060a08301600083015184820360008601526148a48282614569565b91505060208301516148b96020860182614913565b5060408301516148cc6040860182614913565b5060608301516148df606086018261455a565b50608083015184820360808601526148f78282614569565b9150508091505092915050565b61490d81614be8565b82525050565b61491c81614bf2565b82525050565b6000602082019050818103600083015261493c81846144ec565b905092915050565b600060a082019050818103600083015261495e8188614569565b905061496d6020830187614913565b61497a6040830186614913565b614987606083018561455a565b81810360808301526149998184614569565b90509695505050505050565b600060a08201905081810360008301526149bf8188614569565b90506149ce6020830187614913565b6149db6040830186614913565b6149e8606083018561455a565b6149f56080830184614913565b9695505050505050565b60006020820190508181036000830152614a188161459f565b9050919050565b60006020820190508181036000830152614a38816145d6565b9050919050565b60006020820190508181036000830152614a588161460d565b9050919050565b60006020820190508181036000830152614a79818461471e565b905092915050565b60006020820190508181036000830152614a9b818461480a565b905092915050565b600061010082019050614ab9600083018b614904565b8181036020830152614acb818a614794565b90508181036040830152614adf8189614887565b90508181036060830152614af38188614569565b90508181036080830152614b078187614569565b905081810360a0830152614b1b8186614569565b905081810360c0830152614b2f8185614569565b905081810360e0830152614b438184614569565b90509998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715614b7557600080fd5b8060405250919050565b600067ffffffffffffffff821115614b9657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60008160000b9050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614c63578082015181840152602081019050614c48565b83811115614c72576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820c2a6f52c8405f6b652e46b988f4957e19e17cfa9de9ce45fc3861cd47beba0256c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"queryMySelf\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"updatePatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_patient\",\"type\":\"address\"},{\"name\":\"_appointmentType\",\"type\":\"string\"},{\"name\":\"_appointmentTime\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_prescription\",\"type\":\"string\"},{\"name\":\"_money\",\"type\":\"string\"}],\"name\":\"addCases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctorMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"patientMap\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cases\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"doctor\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"patient\",\"type\":\"tuple\"},{\"name\":\"appointmentType\",\"type\":\"string\"},{\"name\":\"appointmentTime\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"prescription\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryCases\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"doctor\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"patient\",\"type\":\"tuple\"},{\"name\":\"appointmentType\",\"type\":\"string\"},{\"name\":\"appointmentTime\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"prescription\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryDoctor\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryPatient\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryPatient\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"theType\",\"type\":\"int8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"dataBirth\",\"type\":\"string\"}],\"name\":\"updatePatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"uint8\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"workYear\",\"type\":\"uint8\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_QUERYMYSELF = "queryMySelf";

    public static final String FUNC_UPDATEDOCTOR = "updateDoctor";

    public static final String FUNC_UPDATEPATIENT = "updatePatient";

    public static final String FUNC_ADDDOCTOR = "addDoctor";

    public static final String FUNC_ADDCASES = "addCases";

    public static final String FUNC_ADDPATIENT = "addPatient";

    public static final String FUNC_DOCTORMAP = "doctorMap";

    public static final String FUNC_PATIENTMAP = "patientMap";

    public static final String FUNC_DELDOCTOR = "delDoctor";

    public static final String FUNC_CASES = "cases";

    public static final String FUNC_QUERYCASES = "queryCases";

    public static final String FUNC_QUERYDOCTOR = "queryDoctor";

    public static final String FUNC_QUERYPATIENT = "queryPatient";

    protected HospitalCases(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Struct0 queryMySelf() throws ContractException {
        final Function function = new Function(FUNC_QUERYMYSELF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public TransactionReceipt updateDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getUpdateDoctorStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt updatePatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatePatient(String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getUpdatePatientStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt addDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getAddDoctorAddressStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public TransactionReceipt addCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddCases(String _patient, String _appointmentType, String _appointmentTime, String _description, String _prescription, String _money) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_patient), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_appointmentTime), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_prescription), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getAddCasesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public TransactionReceipt addPatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPatient(String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPatient(String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getAddPatientStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> doctorMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_DOCTORMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public TransactionReceipt addPatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getAddPatientAddressStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple5<String, BigInteger, BigInteger, BigInteger, String> patientMap(String param0) throws ContractException {
        final Function function = new Function(FUNC_PATIENTMAP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, BigInteger, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public TransactionReceipt delDoctor(String addr) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] delDoctor(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDelDoctor(String addr) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDelDoctorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple8<BigInteger, Struct0, Struct1, String, String, String, String, String> cases(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_CASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Struct0>() {}, new TypeReference<Struct1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, Struct0, Struct1, String, String, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (Struct0) results.get(1), 
                (Struct1) results.get(2), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue());
    }

    public DynamicArray<Struct2> queryCases(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct2>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Struct0 queryDoctor(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct1 queryPatient() throws ContractException {
        final Function function = new Function(FUNC_QUERYPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public Struct1 queryPatient(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public TransactionReceipt updatePatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatePatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePatient(String addr, String name, BigInteger sex, BigInteger age, String dataBirth) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getUpdatePatientAddressStringUint8Uint8StringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public TransactionReceipt updateDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(String addr, String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getUpdateDoctorAddressStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public TransactionReceipt addDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(String name, BigInteger sex, BigInteger age, BigInteger workYear) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getAddDoctorStringUint8Uint8Uint8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public static HospitalCases load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new HospitalCases(contractAddress, client, credential);
    }

    public static HospitalCases deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(HospitalCases.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger theType;

        public BigInteger workYear;

        public Struct0(Utf8String name, Uint8 sex, Uint8 age, Int8 theType, Uint8 workYear) {
            super(name,sex,age,theType,workYear);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.theType = theType.getValue();
            this.workYear = workYear.getValue();
        }

        public Struct0(String name, BigInteger sex, BigInteger age, BigInteger theType, BigInteger workYear) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Int8(theType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(workYear));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.theType = theType;
            this.workYear = workYear;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public String name;

        public BigInteger sex;

        public BigInteger age;

        public BigInteger theType;

        public String dataBirth;

        public Struct1(Utf8String name, Uint8 sex, Uint8 age, Int8 theType, Utf8String dataBirth) {
            super(name,sex,age,theType,dataBirth);
            this.name = name.getValue();
            this.sex = sex.getValue();
            this.age = age.getValue();
            this.theType = theType.getValue();
            this.dataBirth = dataBirth.getValue();
        }

        public Struct1(String name, BigInteger sex, BigInteger age, BigInteger theType, String dataBirth) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(sex),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Int8(theType),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(dataBirth));
            this.name = name;
            this.sex = sex;
            this.age = age;
            this.theType = theType;
            this.dataBirth = dataBirth;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public BigInteger id;

        public Struct0 doctor;

        public Struct1 patient;

        public String appointmentType;

        public String appointmentTime;

        public String description;

        public String prescription;

        public String money;

        public Struct2(Uint256 id, Struct0 doctor, Struct1 patient, Utf8String appointmentType, Utf8String appointmentTime, Utf8String description, Utf8String prescription, Utf8String money) {
            super(id,doctor,patient,appointmentType,appointmentTime,description,prescription,money);
            this.id = id.getValue();
            this.doctor = doctor;
            this.patient = patient;
            this.appointmentType = appointmentType.getValue();
            this.appointmentTime = appointmentTime.getValue();
            this.description = description.getValue();
            this.prescription = prescription.getValue();
            this.money = money.getValue();
        }

        public Struct2(BigInteger id, Struct0 doctor, Struct1 patient, String appointmentType, String appointmentTime, String description, String prescription, String money) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),doctor,patient,new org.fisco.bcos.sdk.abi.datatypes.Utf8String(appointmentType),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(appointmentTime),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(prescription),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(money));
            this.id = id;
            this.doctor = doctor;
            this.patient = patient;
            this.appointmentType = appointmentType;
            this.appointmentTime = appointmentTime;
            this.description = description;
            this.prescription = prescription;
            this.money = money;
        }
    }
}
