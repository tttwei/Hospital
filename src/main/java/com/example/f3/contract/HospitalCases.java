package com.example.f3.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class HospitalCases extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","16156101000203166002900480156130055780601f10612fda57610100808354040283529160200191613005565b820191906000526020600020905b815481529060010190602001808311612fe857829003601f168201915b5050505050815250509050919050565b61010060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff168152602001600060ff168152602001606081526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130b857805160ff19168380011785556130e6565b828001600101855582156130e6579182015b828111156130e55782518255916020019190600101906130ca565b5b5090506130f391906131b0565b5090565b610100604051908101604052806060815260200160608152602001600060ff168152602001600060ff1681526020016060815260200160608152602001600060ff168152602001606081525090565b6101406040519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6131d291905b808211156131ce5760008160009055506001016131b6565b5090565b90565b60006131e18235613d48565b905092915050565b600082601f83011215156131fc57600080fd5b813561320f61320a82613cb5565b613c88565b9150808252602083016020830185838301111561322b57600080fd5b613236838284613d7f565b50505092915050565b600061324b8235613d68565b905092915050565b600061325f8235613d72565b905092915050565b60006020828403121561327957600080fd5b6000613287848285016131d5565b91505092915050565b600080600080600080600080610100898b0312156132ad57600080fd5b60006132bb8b828c016131d5565b985050602089013567ffffffffffffffff8111156132d857600080fd5b6132e48b828c016131e9565b97505060406132f58b828c01613253565b96505060606133068b828c01613253565b955050608089013567ffffffffffffffff81111561332357600080fd5b61332f8b828c016131e9565b94505060a089013567ffffffffffffffff81111561334c57600080fd5b6133588b828c016131e9565b93505060c089013567ffffffffffffffff81111561337557600080fd5b6133818b828c016131e9565b92505060e06133928b828c0161323f565b9150509295985092959890939650565b6000602082840312156133b457600080fd5b600082013567ffffffffffffffff8111156133ce57600080fd5b6133da848285016131e9565b91505092915050565b60008060008060008060008060006101208a8c03121561340257600080fd5b60008a013567ffffffffffffffff81111561341c57600080fd5b6134288c828d016131e9565b99505060208a013567ffffffffffffffff81111561344557600080fd5b6134518c828d016131e9565b98505060408a013567ffffffffffffffff81111561346e57600080fd5b61347a8c828d016131e9565b97505060608a013567ffffffffffffffff81111561349757600080fd5b6134a38c828d016131e9565b96505060808a013567ffffffffffffffff8111156134c057600080fd5b6134cc8c828d016131e9565b95505060a08a013567ffffffffffffffff8111156134e957600080fd5b6134f58c828d016131e9565b94505060c08a013567ffffffffffffffff81111561351257600080fd5b61351e8c828d016131e9565b93505060e08a013567ffffffffffffffff81111561353b57600080fd5b6135478c828d016131e9565b9250506101008a013567ffffffffffffffff81111561356557600080fd5b6135718c828d016131e9565b9150509295985092959850929598565b600080600080600080600080610100898b03121561359e57600080fd5b600089013567ffffffffffffffff8111156135b857600080fd5b6135c48b828c016131e9565b985050602089013567ffffffffffffffff8111156135e157600080fd5b6135ed8b828c016131e9565b97505060406135fe8b828c01613253565b965050606061360f8b828c01613253565b955050608089013567ffffffffffffffff81111561362c57600080fd5b6136388b828c016131e9565b94505060a089013567ffffffffffffffff81111561365557600080fd5b6136618b828c016131e9565b93505060c06136728b828c01613253565b92505060e089013567ffffffffffffffff81111561368f57600080fd5b61369b8b828c016131e9565b9150509295985092959890939650565b600080600080600080600060e0888a0312156136c657600080fd5b600088013567ffffffffffffffff8111156136e057600080fd5b6136ec8a828b016131e9565b97505060206136fd8a828b01613253565b965050604061370e8a828b01613253565b955050606088013567ffffffffffffffff81111561372b57600080fd5b6137378a828b016131e9565b945050608088013567ffffffffffffffff81111561375457600080fd5b6137608a828b016131e9565b93505060a088013567ffffffffffffffff81111561377d57600080fd5b6137898a828b016131e9565b92505060c061379a8a828b0161323f565b91505092959891949750929550565b6137b281613d11565b82525050565b60006137c382613cee565b808452602084019350836020820285016137dc85613ce1565b60005b848110156138155783830388526137f7838351613901565b925061380282613d04565b91506020880197506001810190506137df565b508196508694505050505092915050565b600061383182613cf9565b808452613845816020860160208601613d8e565b61384e81613dc1565b602085010191505092915050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b600061014083016000830151848203600086015261391f8282613826565b915050602083015161393460208601826137a9565b506040830151848203604086015261394c8282613826565b915050606083015184820360608601526139668282613826565b915050608083015184820360808601526139808282613826565b91505060a083015184820360a086015261399a8282613826565b91505060c083015184820360c08601526139b48282613826565b91505060e083015184820360e08601526139ce8282613826565b9150506101008301518482036101008601526139ea8282613826565b915050610120830151848203610120860152613a068282613826565b9150508091505092915050565b600061010083016000830151613a2c60008601826137a9565b5060208301518482036020860152613a448282613826565b9150506040830151613a596040860182613bb3565b506060830151613a6c6060860182613bb3565b5060808301518482036080860152613a848282613826565b91505060a083015184820360a0860152613a9e8282613826565b91505060c083015184820360c0860152613ab88282613826565b91505060e0830151613acd60e0860182613ba4565b508091505092915050565b6000610100830160008301518482036000860152613af68282613826565b91505060208301518482036020860152613b108282613826565b9150506040830151613b256040860182613bb3565b506060830151613b386060860182613bb3565b5060808301518482036080860152613b508282613826565b91505060a083015184820360a0860152613b6a8282613826565b91505060c0830151613b7f60c0860182613bb3565b5060e083015184820360e0860152613b978282613826565b9150508091505092915050565b613bad81613d31565b82525050565b613bbc81613d3b565b82525050565b60006020820190508181036000830152613bdc81846137b8565b905092915050565b60006020820190508181036000830152613bfd8161385c565b9050919050565b60006020820190508181036000830152613c1d81613893565b9050919050565b60006020820190508181036000830152613c3d816138ca565b9050919050565b60006020820190508181036000830152613c5e8184613a13565b905092915050565b60006020820190508181036000830152613c808184613ad8565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715613cab57600080fd5b8060405250919050565b600067ffffffffffffffff821115613ccc57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613dac578082015181840152602081019050613d91565b83811115613dbb576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820731a80831c3d33e8a59975fd7f98092d1b0f4a389703d4d11271e88f84f66cd26c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","8101604052809291908181526020018280546001816001161561010002031660029004801561201c5780601f10611ff15761010080835404028352916020019161201c565b820191906000526020600020905b815481529060010190602001808311611fff57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120be5780601f10612093576101008083540402835291602001916120be565b820191906000526020600020905b8154815290600101906020018083116120a157829003601f168201915b50505050508152602001600682015481525050905080915050919050565b61010060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160206040519081016040528060008152508152602001600060ff168152602001600060ff1681526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001602060405190810160405280600081525081526020016000815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906122199291906130c6565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160030190805190602001906122789291906130c6565b5060a08201518160040190805190602001906122959291906130c6565b5060c08201518160050190805190602001906122b29291906130c6565b5060e08201518160060155905050565b60006122cc613015565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415156123a2576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161239990613be4565b60405180910390fd5b610100604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018960ff1681526020018860ff16815260200187815260200186815260200185815260200184815250905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061249e9291906130c6565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160030190805190602001906124fd9291906130c6565b5060a082015181600401908051906020019061251a9291906130c6565b5060c08201518160050190805190602001906125379291906130c6565b5060e08201518160060155905050505050505050505050565b600061255a613015565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156125eb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016125e290613c24565b60405180910390fd5b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415156126c1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016126b890613be4565b60405180910390fd5b610100604051908101604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018960ff1681526020018860ff16815260200187815260200186815260200185815260200184815250905080600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906127bd9291906130c6565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff160217905550608082015181600301908051906020019061281c9291906130c6565b5060a08201518160040190805190602001906128399291906130c6565b5060c08201518160050190805190602001906128569291906130c6565b5060e0820151816006015590505050505050505050505050565b606061287a613077565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561290b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161290290613c24565b60405180910390fd5b60018a6040518082805190602001908083835b602083101515612943578051825260208201915060208101905060208303925061291e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a0d5780601f106129e257610100808354040283529160200191612a0d565b820191906000526020600020905b8154815290600101906020018083116129f057829003601f168201915b50505050509150604051806000019050604051809103902060001916826040516020018082805190602001908083835b602083101515612a625780518252602082019150602081019050602083039250612a3d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612acb5780518252602082019150602081019050602083039250612aa6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151515612b3f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612b3690613c04565b60405180910390fd5b610100604051908101604052808b81526020018a81526020018960ff1681526020018860ff1681526020018781526020018681526020018560ff1681526020018481525090508060018b6040518082805190602001908083835b602083101515612bbe5780518252602082019150602081019050602083039250612b99565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190612c0d9291906130c6565b506020820151816001019080519060200190612c2a9291906130c6565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff1602179055506080820151816003019080519060200190612c899291906130c6565b5060a0820151816004019080519060200190612ca69291906130c6565b5060c08201518160050160006101000a81548160ff021916908360ff16021790555060e0820151816006019080519060200190612ce49291906130c6565b5090505050505050505050505050565b6000612cfe613015565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612d8f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612d8690613c24565b60405180910390fd5b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e66576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612e5d90613c04565b60405180910390fd5b610100604051908101604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018960ff1681526020018860ff16815260200187815260200186815260200185815260200184815250905080600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612f629291906130c6565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160","03019080519060200190612fc19291906130c6565b5060a0820151816004019080519060200190612fde9291906130c6565b5060c0820151816005019080519060200190612ffb9291906130c6565b5060e0820151816006015590505050505050505050505050565b61010060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600060ff168152602001600060ff168152602001606081526020016060815260200160608152602001600081525090565b610100604051908101604052806060815260200160608152602001600060ff168152602001600060ff1681526020016060815260200160608152602001600060ff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061310757805160ff1916838001178555613135565b82800160010185558215613135579182015b82811115613134578251825591602001919060010190613119565b5b50905061314291906131b0565b5090565b6101406040519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6131d291905b808211156131ce5760008160009055506001016131b6565b5090565b90565b60006131e18235613d48565b905092915050565b600082601f83011215156131fc57600080fd5b813561320f61320a82613cb5565b613c88565b9150808252602083016020830185838301111561322b57600080fd5b613236838284613d7f565b50505092915050565b600061324b8235613d68565b905092915050565b600061325f8235613d72565b905092915050565b60006020828403121561327957600080fd5b6000613287848285016131d5565b91505092915050565b600080600080600080600080610100898b0312156132ad57600080fd5b60006132bb8b828c016131d5565b985050602089013567ffffffffffffffff8111156132d857600080fd5b6132e48b828c016131e9565b97505060406132f58b828c01613253565b96505060606133068b828c01613253565b955050608089013567ffffffffffffffff81111561332357600080fd5b61332f8b828c016131e9565b94505060a089013567ffffffffffffffff81111561334c57600080fd5b6133588b828c016131e9565b93505060c089013567ffffffffffffffff81111561337557600080fd5b6133818b828c016131e9565b92505060e06133928b828c0161323f565b9150509295985092959890939650565b6000602082840312156133b457600080fd5b600082013567ffffffffffffffff8111156133ce57600080fd5b6133da848285016131e9565b91505092915050565b60008060008060008060008060006101208a8c03121561340257600080fd5b60008a013567ffffffffffffffff81111561341c57600080fd5b6134288c828d016131e9565b99505060208a013567ffffffffffffffff81111561344557600080fd5b6134518c828d016131e9565b98505060408a013567ffffffffffffffff81111561346e57600080fd5b61347a8c828d016131e9565b97505060608a013567ffffffffffffffff81111561349757600080fd5b6134a38c828d016131e9565b96505060808a013567ffffffffffffffff8111156134c057600080fd5b6134cc8c828d016131e9565b95505060a08a013567ffffffffffffffff8111156134e957600080fd5b6134f58c828d016131e9565b94505060c08a013567ffffffffffffffff81111561351257600080fd5b61351e8c828d016131e9565b93505060e08a013567ffffffffffffffff81111561353b57600080fd5b6135478c828d016131e9565b9250506101008a013567ffffffffffffffff81111561356557600080fd5b6135718c828d016131e9565b9150509295985092959850929598565b600080600080600080600080610100898b03121561359e57600080fd5b600089013567ffffffffffffffff8111156135b857600080fd5b6135c48b828c016131e9565b985050602089013567ffffffffffffffff8111156135e157600080fd5b6135ed8b828c016131e9565b97505060406135fe8b828c01613253565b965050606061360f8b828c01613253565b955050608089013567ffffffffffffffff81111561362c57600080fd5b6136388b828c016131e9565b94505060a089013567ffffffffffffffff81111561365557600080fd5b6136618b828c016131e9565b93505060c06136728b828c01613253565b92505060e089013567ffffffffffffffff81111561368f57600080fd5b61369b8b828c016131e9565b9150509295985092959890939650565b600080600080600080600060e0888a0312156136c657600080fd5b600088013567ffffffffffffffff8111156136e057600080fd5b6136ec8a828b016131e9565b97505060206136fd8a828b01613253565b965050604061370e8a828b01613253565b955050606088013567ffffffffffffffff81111561372b57600080fd5b6137378a828b016131e9565b945050608088013567ffffffffffffffff81111561375457600080fd5b6137608a828b016131e9565b93505060a088013567ffffffffffffffff81111561377d57600080fd5b6137898a828b016131e9565b92505060c061379a8a828b0161323f565b91505092959891949750929550565b6137b281613d11565b82525050565b60006137c382613cee565b808452602084019350836020820285016137dc85613ce1565b60005b848110156138155783830388526137f7838351613901565b925061380282613d04565b91506020880197506001810190506137df565b508196508694505050505092915050565b600061383182613cf9565b808452613845816020860160208601613d8e565b61384e81613dc1565b602085010191505092915050565b6000600e82527f75736572206861732065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f75736572206e6f742065786973740000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6f6e6c792061646d696e000000000000000000000000000000000000000000006020830152604082019050919050565b600061014083016000830151848203600086015261391f8282613826565b915050602083015161393460208601826137a9565b506040830151848203604086015261394c8282613826565b915050606083015184820360608601526139668282613826565b915050608083015184820360808601526139808282613826565b91505060a083015184820360a086015261399a8282613826565b91505060c083015184820360c08601526139b48282613826565b91505060e083015184820360e08601526139ce8282613826565b9150506101008301518482036101008601526139ea8282613826565b915050610120830151848203610120860152613a068282613826565b9150508091505092915050565b600061010083016000830151613a2c60008601826137a9565b5060208301518482036020860152613a448282613826565b9150506040830151613a596040860182613bb3565b506060830151613a6c6060860182613bb3565b5060808301518482036080860152613a848282613826565b91505060a083015184820360a0860152613a9e8282613826565b91505060c083015184820360c0860152613ab88282613826565b91505060e0830151613acd60e0860182613ba4565b508091505092915050565b6000610100830160008301518482036000860152613af68282613826565b91505060208301518482036020860152613b108282613826565b9150506040830151613b256040860182613bb3565b506060830151613b386060860182613bb3565b5060808301518482036080860152613b508282613826565b91505060a083015184820360a0860152613b6a8282613826565b91505060c0830151613b7f60c0860182613bb3565b5060e083015184820360e0860152613b978282613826565b9150508091505092915050565b613bad81613d31565b82525050565b613bbc81613d3b565b82525050565b60006020820190508181036000830152613bdc81846137b8565b905092915050565b60006020820190508181036000830152613bfd8161385c565b9050919050565b60006020820190508181036000830152613c1d81613893565b9050919050565b60006020820190508181036000830152613c3d816138ca565b9050919050565b60006020820190508181036000830152613c5e8184613a13565b905092915050565b60006020820190508181036000830152613c808184613ad8565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715613cab57600080fd5b8060405250919050565b600067ffffffffffffffff821115613ccc57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613dac578082015181840152602081019050613d91565b83811115613dbb576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d822047999ab88a28cb8ee7bfbf89ec31ded2da19074549afe99a155f169a49b6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"uint256\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identity\",\"type\":\"string\"}],\"name\":\"queryCases\",\"outputs\":[{\"components\":[{\"name\":\"casesId\",\"type\":\"string\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"patientId\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"pillsList\",\"type\":\"string\"},{\"name\":\"serviceList\",\"type\":\"string\"},{\"name\":\"acount\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identity\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"date\",\"type\":\"string\"}],\"name\":\"addPatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryMySelf\",\"outputs\":[{\"components\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"uint256\"}],\"name\":\"addDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identity\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"date\",\"type\":\"string\"}],\"name\":\"updatePatient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"casesId\",\"type\":\"string\"},{\"name\":\"patientId\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"pillsList\",\"type\":\"string\"},{\"name\":\"serviceList\",\"type\":\"string\"},{\"name\":\"acount\",\"type\":\"string\"}],\"name\":\"addCases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"queryDoctor\",\"outputs\":[{\"components\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"uint256\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"hospital\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"uint256\"}],\"name\":\"updateDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identity\",\"type\":\"string\"}],\"name\":\"queryPatient\",\"outputs\":[{\"components\":[{\"name\":\"identity\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint8\"},{\"name\":\"gender\",\"type\":\"uint8\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"contact\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"date\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDDOCTOR = "addDoctor";

    public static final String FUNC_QUERYCASES = "queryCases";

    public static final String FUNC_ADDPATIENT = "addPatient";

    public static final String FUNC_QUERYMYSELF = "queryMySelf";

    public static final String FUNC_DELDOCTOR = "delDoctor";

    public static final String FUNC_UPDATEPATIENT = "updatePatient";

    public static final String FUNC_ADDCASES = "addCases";

    public static final String FUNC_QUERYDOCTOR = "queryDoctor";

    public static final String FUNC_UPDATEDOCTOR = "updateDoctor";

    public static final String FUNC_QUERYPATIENT = "queryPatient";

    protected HospitalCases(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt addDoctor(String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<String, BigInteger, BigInteger, String, String, String, BigInteger> getAddDoctorStringUint8Uint8StringStringStringUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<String, BigInteger, BigInteger, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue()
                );
    }

    public DynamicArray<Struct0> queryCases(String identity) throws ContractException {
        final Function function = new Function(FUNC_QUERYCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt addPatient(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addPatient(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPatient(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date) {
        final Function function = new Function(
                FUNC_ADDPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, BigInteger, BigInteger, String, String, BigInteger, String> getAddPatientInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, BigInteger, BigInteger, String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (String) results.get(7).getValue()
                );
    }

    public Struct1 queryMySelf() throws ContractException {
        final Function function = new Function(FUNC_QUERYMYSELF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public TransactionReceipt addDoctor(String addr, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addDoctor(String addr, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDoctor(String addr, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, BigInteger, BigInteger, String, String, String, BigInteger> getAddDoctorAddressStringUint8Uint8StringStringStringUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, BigInteger, BigInteger, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public TransactionReceipt delDoctor() {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] delDoctor(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDelDoctor() {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt delDoctor(String addr) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] delDoctor(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDelDoctor(String addr) {
        final Function function = new Function(
                FUNC_DELDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDelDoctorAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt updatePatient(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updatePatient(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePatient(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date) {
        final Function function = new Function(
                FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, BigInteger, BigInteger, String, String, BigInteger, String> getUpdatePatientInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPATIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, BigInteger, BigInteger, String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (String) results.get(7).getValue()
                );
    }

    public TransactionReceipt addCases(String casesId, String patientId, String hospital, String department, String time, String description, String pillsList, String serviceList, String acount) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(casesId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pillsList), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(serviceList), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addCases(String casesId, String patientId, String hospital, String department, String time, String description, String pillsList, String serviceList, String acount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(casesId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pillsList), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(serviceList), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddCases(String casesId, String patientId, String hospital, String department, String time, String description, String pillsList, String serviceList, String acount) {
        final Function function = new Function(
                FUNC_ADDCASES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(casesId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pillsList), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(serviceList), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple9<String, String, String, String, String, String, String, String, String> getAddCasesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple9<String, String, String, String, String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue(), 
                (String) results.get(8).getValue()
                );
    }

    public Struct1 queryDoctor(String addr) throws ContractException {
        final Function function = new Function(FUNC_QUERYDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public TransactionReceipt updateDoctor(String addr, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(String addr, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(String addr, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, String, BigInteger, BigInteger, String, String, String, BigInteger> getUpdateDoctorAddressStringUint8Uint8StringStringStringUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, String, BigInteger, BigInteger, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public TransactionReceipt updateDoctor(String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDoctor(String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDoctor(String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
        final Function function = new Function(
                FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<String, BigInteger, BigInteger, String, String, String, BigInteger> getUpdateDoctorStringUint8Uint8StringStringStringUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDOCTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<String, BigInteger, BigInteger, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue()
                );
    }

    public Struct2 queryPatient(String identity) throws ContractException {
        final Function function = new Function(FUNC_QUERYPATIENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct2>() {}));
        return executeCallWithSingleValueReturn(function, Struct2.class);
    }

    public static HospitalCases load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new HospitalCases(contractAddress, client, credential);
    }

    public static HospitalCases deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(HospitalCases.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public String casesId;

        public String doctorId;

        public String patientId;

        public String hospital;

        public String department;

        public String time;

        public String description;

        public String pillsList;

        public String serviceList;

        public String acount;

        public Struct0(Utf8String casesId, Address doctorId, Utf8String patientId, Utf8String hospital, Utf8String department, Utf8String time, Utf8String description, Utf8String pillsList, Utf8String serviceList, Utf8String acount) {
            super(casesId,doctorId,patientId,hospital,department,time,description,pillsList,serviceList,acount);
            this.casesId = casesId.getValue();
            this.doctorId = doctorId.getValue();
            this.patientId = patientId.getValue();
            this.hospital = hospital.getValue();
            this.department = department.getValue();
            this.time = time.getValue();
            this.description = description.getValue();
            this.pillsList = pillsList.getValue();
            this.serviceList = serviceList.getValue();
            this.acount = acount.getValue();
        }

        public Struct0(String casesId, String doctorId, String patientId, String hospital, String department, String time, String description, String pillsList, String serviceList, String acount) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(casesId),new org.fisco.bcos.sdk.abi.datatypes.Address(doctorId),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(patientId),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(department),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pillsList),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(serviceList),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(acount));
            this.casesId = casesId;
            this.doctorId = doctorId;
            this.patientId = patientId;
            this.hospital = hospital;
            this.department = department;
            this.time = time;
            this.description = description;
            this.pillsList = pillsList;
            this.serviceList = serviceList;
            this.acount = acount;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public String userAddress;

        public String name;

        public BigInteger age;

        public BigInteger gender;

        public String image;

        public String contact;

        public String hospital;

        public BigInteger department;

        public Struct1(Address userAddress, Utf8String name, Uint8 age, Uint8 gender, Utf8String image, Utf8String contact, Utf8String hospital, Uint256 department) {
            super(userAddress,name,age,gender,image,contact,hospital,department);
            this.userAddress = userAddress.getValue();
            this.name = name.getValue();
            this.age = age.getValue();
            this.gender = gender.getValue();
            this.image = image.getValue();
            this.contact = contact.getValue();
            this.hospital = hospital.getValue();
            this.department = department.getValue();
        }

        public Struct1(String userAddress, String name, BigInteger age, BigInteger gender, String image, String contact, String hospital, BigInteger department) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(hospital),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(department));
            this.userAddress = userAddress;
            this.name = name;
            this.age = age;
            this.gender = gender;
            this.image = image;
            this.contact = contact;
            this.hospital = hospital;
            this.department = department;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public String identity;

        public String name;

        public BigInteger age;

        public BigInteger gender;

        public String image;

        public String contact;

        public BigInteger status;

        public String date;

        public Struct2(Utf8String identity, Utf8String name, Uint8 age, Uint8 gender, Utf8String image, Utf8String contact, Uint8 status, Utf8String date) {
            super(identity,name,age,gender,image,contact,status,date);
            this.identity = identity.getValue();
            this.name = name.getValue();
            this.age = age.getValue();
            this.gender = gender.getValue();
            this.image = image.getValue();
            this.contact = contact.getValue();
            this.status = status.getValue();
            this.date = date.getValue();
        }

        public Struct2(String identity, String name, BigInteger age, BigInteger gender, String image, String contact, BigInteger status, String date) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(identity),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(age),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(gender),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(image),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(contact),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(date));
            this.identity = identity;
            this.name = name;
            this.age = age;
            this.gender = gender;
            this.image = image;
            this.contact = contact;
            this.status = status;
            this.date = date;
        }
    }
}
